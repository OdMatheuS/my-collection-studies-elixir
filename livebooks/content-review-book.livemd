<!-- livebook:{"persist_outputs":true} -->

# Content review of book: Learn Functional Programming with Elixir

## Section 1. chap 2

```elixir
import IEx.Helpers
```

<!-- livebook:{"output":true} -->

```
IEx.Helpers
```

```elixir
# Sarah items

[slices_of_bread, cost_each_slice, bottles_milk, cost_each_bottles, cake] = [10, 0.10, 3, 2, 15]

calc_total_expense_each_unit = &(&1 * &2)

total_cost_bread = calc_total_expense_each_unit.(slices_of_bread, cost_each_slice)

total_cost_milk = calc_total_expense_each_unit.(cost_each_bottles, bottles_milk)

all_items_purchased = [total_cost_milk, total_cost_bread, cake]

total_expend = Enum.sum(all_items_purchased)
```

<!-- livebook:{"output":true} -->

```
22.0
```

```elixir
# Bob traveled
travelled_distance = 200
hours_travelled = 4

all_infos_about_trip = fn distance, hours ->
  IO.puts("travel distance: #{distance}km, 
     time: #{hours}h, 
     average speed #{div(distance, hours)}km/h")
end

all_infos_about_trip.(travelled_distance, hours_travelled)
```

<!-- livebook:{"output":true} -->

```
travel distance: 200km, time: 4h, average speed 50km/h
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
# Applies a Tax
tax = 0.12

all_prices = [12.5, 30.99, 250.49, 18.80]

apply_tax = fn prices ->
  Enum.each(prices, fn x_price ->
    IO.puts("Price: #{x_price * tax + x_price} - Tax: #{x_price * tax}")
  end)
end

apply_tax.(all_prices)
```

<!-- livebook:{"output":true} -->

```
Price: 14.0 - Tax: 1.5
Price: 34.7088 - Tax: 3.7188
Price: 280.5488 - Tax: 30.0588
Price: 21.056 - Tax: 2.256
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
defmodule MatchstickFactory do
  def boxes(_foobar), do: "Something todo"
end

MatchstickFactory.boxes(0)
```

<!-- livebook:{"output":true} -->

```
"Something todo"
```
